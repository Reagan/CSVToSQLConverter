+++++++++++++++++++++++++++++++++
+	CSV to SQL Converter 	+
+++++++++++++++++++++++++++++++++

Introduction 
=============
The CSV to SQL converter is a command line tool that will be used to convert a CSV file(s) to an SQL Dump file(s).

How it works
============

Step 1: Program can be used to process a single csv file or a set of csv files e.g.

[to csv file]
>> CSVToSQLConverter -p /path/to/csv/file.csv

[to folder]
>> CSVToSQLConverter -p /path/to/csv/folder/

The program may prompt a user to use program-defined defaults  (-d -> defaults. -p specify path to csv files)

>> CSVToSQLConverter -d true -p /path/to/csv/file.csv
>> CSVToSQLConverter -d true -p /path/to/csv/folder

If defaults are used, then the created SQL dump files are stored on the same location as the csv files. If defaults are used, then the script is unable to DROP tables. To allow the script to drop tables, the flag -a with attribute allow_drop_table should be used e.g.

>> CSVToSQLConverter -a true (-a -> allow drop table) : default value is false

To specify the SQL dump files folder use the -o flag

>> CSVToSQLConverter -o /path/to/output/folder

A user can create a properties file with the list of tables (related to the csv files contained) and a map of the table columns and their attributes using the following structure

* [] - denote the table name and there should be a csv file with the same name
* A property e.g. id=INT, PRIMARY KEY, AUTO_INCREMENT : The 'id' column should be present in the related csv file 

A config file showing the configuration for the various tables. This config file shoule be specified using the -c flag

>> CSVToSQLConverter -c /path/to/config/file/path
Step 2: For each csv file, prompt for the table name.
[Default table name is the name of the csv file]

>> Define table name for [file1.csv]: file1? 

Step 3: For each column as defined in the csv file, specify the name and properties for database column name. 

Using example csv column below:
id, first_name, second_name 

>> Define column "id":
name [id]?
Column type [INT]?
Is Primary Key [Yes]?
Foreign Key [No]? <TableName>\s<Column> 

>> Define column "first_name"
name [first_name]:
Column type [varchar(255)]:
Is Primary Key [No]:
Foreign Key [No]:

*** Rules ***
- If the first column has the substring/string 'id', then it should by default be marked as primary key
- For columns that are foreign keys, the table name and column should be entered separated by a whitespace char

Step 4: Define the table type.

>> Define table type [MyISAM]:

Step 5: DROP table if exists OR ADD/UPDATE table contents [ADD/UPDATE]:

>> DROP table if exists OR ADD/UPDATE table contents [ADD/UPDATE]:

Step 6: Specify SQL Standard [SQL 1999]:

Step 7: Specify CSV File delimiter (,):

Step 8: Specify the location at which to store the output SQL dump file (/current/path/of/csv/files_{timestamp}.sql
